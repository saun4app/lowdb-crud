<!-- Generated by documentation.js. Update this documentation by updating the source code. -->

### Table of Contents

*   [LowdbCrud][1]
    *   [Parameters][2]
    *   [Examples][3]
    *   [create][4]
        *   [Parameters][5]
        *   [Examples][6]
    *   [read][7]
        *   [Parameters][8]
        *   [Examples][9]
    *   [update][10]
        *   [Parameters][11]
        *   [Examples][12]
    *   [upsert][13]
        *   [Parameters][14]
        *   [Examples][15]
    *   [delete][16]
        *   [Parameters][17]
        *   [Examples][18]
    *   [list_table][19]
        *   [Parameters][20]
        *   [Examples][21]
    *   [delete_table][22]
        *   [Parameters][23]
        *   [Examples][24]

## LowdbCrud

LowdbCrud provides create, read, update, delete (CRUD)
operations on a json data structure that resembles a database table.
LowdbCrud has 7 methods: <code style='color:blue'>create()</code>, <code style='color:blue'>read()</code>, <code style='color:blue'>update()</code>, <code style='color:blue'>upsert()</code>, <code style='color:blue'>delete()</code>, <code style='color:blue'>list_table()</code>, and <code style='color:blue'>delete_table()</code>.
LowdbCrud is a wrapper of <a href='https://github.com/typicode/lowdb' target='_blank'>lowdb</a> that stores all data in one json file that can represent multiple tables.
LowdbCrud uses a <span style='color:blue'>data object</span>
that stores all data (tables). Each <span style='color:blue'>key</span> of the object represents a table name.
The data of each table is stored in an <span style='color:blue'>array of objects</span>.
The <span style='color:blue'>table data structure</span> example below shows the data structure of 2 tables (<span style='color:blue'>person</span> and <span style='color:blue'>phone</span>).
Additionally, the <span style='color:blue'>database object</span>, <span style='color:blue'>data object</span>, and the <span style='color:blue'>table object</span> (see syntax example bellow) can be manipulated directly by using <a href='https://github.com/typicode/lowdb' target='_blank'>lowdb</a> and <a href='https://github.com/lodash/lodash' target='_blank'>lodash</a>.
In terms of testing, <a href='https://github.com/jasmine/jasmine-npm' target='_blank'>jasmine</a> can be used by default.  Other test frameworks may need additional configuration because <a href='https://github.com/typicode/lowdb' target='_blank'>lowdb 3</a> is a pure ESM package.

### Parameters

*   `param_obj` **[Object][25]** {'db_file': 'full_path'} (optional, default `{}`)

### Examples

```javascript
Table data structure:

    {
      "person":[{"name":"Alexa", "age": 35},
                {"name":"Drew", "age": 21}],
      "phone":[{"home":"234-567-8901", "cell":"234-567-8900"},
               "home":"234-789-8901", "cell":"234-789-8900"]
     }
```

```javascript
Object instantiation:

      const param_obj = {'db_file':'/home/my-app/data.json'}
      const my_obj = new LowdbCrud(param_obj)

  The database object:
      my_obj.attr.db_obj

  The data object
      my_obj.attr.db_obj.data

  The tables:
      my_obj.attr.db_obj.data['person']
      my_obj.attr.db_obj.data['phone']
```

### create

The <code style='color:blue'>create()</code> method inserts one or more rows of object into a table.
This method returns an <code style='color:blue'>array</code> of <code style='color:blue'>uuid</code> automatically created for each inserted row.

#### Parameters

*   `param_obj` **[Object][25]** {'table_name': 'string',
    'row_obj_list': array} (optional, default `{}`)

#### Examples

```javascript
const person_obj_list = [{"name":"Alexa", "age": 35},
                       {"name":"Drew", "age": 21}]

  const param_obj = {'table_name': 'person',
                     'row_obj_list': person_obj_list}

  const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const uuid_list = my_obj.create(param_obj)
  // Note: uuid_list looks like ["vXJUGH55tNo2iP91eUYLpk", "siysrj3q2PWn8EFX7rP5SL"}]
```

Returns **[array][26]** An uuid array of created rows.

### read

The <code style='color:blue'>read()</code> method retrieves one or more rows of object from a table.
This method returns an <code style='color:blue'>array</code> of <code style='color:blue'>row objects</code> based on <code style='color:blue'>value_filter_obj</code> and <code style='color:blue'>col_select_list</code> parameters.
if <code style='color:blue'>value_filter_obj</code> is not given, all rows of the table are retrieved.
if <code style='color:blue'>col_select_list</code> is not given, all columns of each row is retrieved.

#### Parameters

*   `param_obj` **[object][25]** {'table_name': 'string',
    'value_filter_obj': object}
    'col_select_list': array} (optional, default `{}`)

#### Examples

```javascript
const param_obj = {'table_name': 'person',
                     'value_filter_obj': { 'age': 21 },
                     'col_select_list': ['name']}

  const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const row_obj_list = my_obj.read(param_obj)
  // Note: row_obj_list is [{"name":"Drew"}]
```

Returns **[array][26]** An row object array that looks like
\[{"name":"Drew", "age": 21}].

### update

The <code style='color:blue'>update()</code> method changes the value(s) of selected row(s), base on <code style='color:blue'>value_filter_obj</code>, to the values of the <code style='color:blue'>update_obj</code> parameter.
This method returns an <code style='color:blue'>array</code> of <code style='color:blue'>uuid</code> of the updated row(s).

#### Parameters

*   `param_obj` **[Object][25]** {'table_name': 'string',
    'row_obj_list': array} (optional, default `{}`)

#### Examples

```javascript
const param_obj = {'table_name': 'person',
                     'value_filter_obj': { 'name': Drew },
                     'update_obj': { 'name': 'Andrew' }}

  const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const uuid_list = my_obj.update(param_obj)
  // Note: uuid_list looks like ["vXJUGH55tNo2iP91eUYLpk"}]
```

Returns **[array][26]** An uuid array of updated rows.

### upsert

The <code style='color:blue'>upsert()</code> method calls <code style='color:blue'>update()</code> method.
If the target row is not found, it calls <code style='color:blue'>create()</code> method inserting the values of <code style='color:blue'>update_obj</code> parameter as a new row.
This method returns an <code style='color:blue'>array</code> of <code style='color:blue'>uuid</code> of the <span style='color:blue'>updated</span> or <span style='color:blue'>inserted</span> row(s).

#### Parameters

*   `param_obj` **[Object][25]** {'table_name': 'string',
    'row_obj_list': array} (optional, default `{}`)

#### Examples

```javascript
const param_obj = {'table_name': 'person',
                     'value_filter_obj': { 'name': Drew },
                     'update_obj': { 'name': 'Andrew' }}

  const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const uuid_list = my_obj.upsert(param_obj)
  // Note: uuid_list looks like ["vXJUGH55tNo2iP91eUYLpk"}]
```

Returns **[array][26]** An uuid array of updated or inserted rows.

### delete

The <code style='color:blue'>delete()</code> method removes selected row(s) from a table base on <code style='color:blue'>value_filter_obj</code> parameter.
This method returns an <code style='color:blue'>array</code> of <code style='color:blue'>uuid</code> of the deleted row(s).
If the <code style='color:blue'>value_filter_obj</code> parameter is <span style='color:red'>not given</span> or <span style='color:red'>empty</span>, <span style='color:red'>all rows</span> of the table will be <span style='color:red'>deleted</span>.

#### Parameters

*   `param_obj` **[Object][25]** {'table_name': 'string',
    'value_filter_obj': array} (optional, default `{}`)

#### Examples

```javascript
const param_obj = {'table_name': 'person',
                   'value_filter_obj': { 'name': Drew }}

  const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const uuid_list = my_obj.delete(param_obj)
  // Note: uuid_list looks like ["vXJUGH55tNo2iP91eUYLpk"}]
```

Returns **[array][26]** An uuid array of deleted rows.

### list_table

The <code style='color:blue'>list_table()</code> returns an array of exiting table names.

#### Parameters

*   `param_obj`   (optional, default `{}`)

#### Examples

```javascript
const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const uuid_list = my_obj.list_table()
  // Note: table names looks like ["person", "address"]
```

Returns **[array][26]** An array table names.

### delete_table

The <code style='color:blue'>delete_table()</code> method removes selected table from the data object base on <code style='color:blue'>table_name</code> parameter.
This method returns the deleted <code style='color:blue'>table_name</code> or null if the table name does not exist.

#### Parameters

*   `param_obj` **[Object][25]** {'table_name': 'string'} (optional, default `{}`)

#### Examples

```javascript
const param_obj = {'table_name': 'person'}
  const my_obj = new LowdbCrud({'db_file':'/home/my-app/data.json'})
  const table_name = my_obj.delete(param_obj)
  // Note: table_name is 'person'
```

Returns **[string][27]** The deleted table name.

[1]: #lowdbcrud

[2]: #parameters

[3]: #examples

[4]: #create

[5]: #parameters-1

[6]: #examples-1

[7]: #read

[8]: #parameters-2

[9]: #examples-2

[10]: #update

[11]: #parameters-3

[12]: #examples-3

[13]: #upsert

[14]: #parameters-4

[15]: #examples-4

[16]: #delete

[17]: #parameters-5

[18]: #examples-5

[19]: #list_table

[20]: #parameters-6

[21]: #examples-6

[22]: #delete_table

[23]: #parameters-7

[24]: #examples-7

[25]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object

[26]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array

[27]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String
